#!/bin/bash -xe

## Run in terminal
#
# Executes given command in terminal
#
term_run() {
  exec ${TERMAPP} -c JiFi -e "${@}"
}

## Desktop notifications
#
notify() {
  notify-send -a rofi JIRA "${*}"
}

## Pango encode string
#
pangoenc() {
  sed 's/&/\&amp;/g; s/"/\&quot;/g;'
}

## Menu renderer
#
# Takes list of newline-separated items on STDIN and
# returns the selection to STDOUT. Supports Pango
# markup.
#
menu() {
  pangoenc | rofi -dmenu -markup-rows -i -l 25 -width 1000 -p "[JiFi] $1"
}

## Load custom config
#
# This can be used to override any of the previous functions
# as well as define your favorite projects in `PROJECTS` array
# variable.
# 
test -f ~/.config/rofi/jifi.sh && . ~/.config/rofi/jifi.sh

## Menu: Main
#
# Root of the JIRA-Rofi operations, renders the main menu
# static elements but also specific project listings
#
main_menu() {
  _menu=$(cat <<EOF
My issues
Watched issues
Create issue

$(for p in "${PROJECTS[@]}"; do echo "Issues: ${p}"; done)

Projects
EOF
)
  choice=`echo "${_menu}" | menu`
  case ${choice} in
    "My issues")
      jira mine --template rofi_issues | menu "My issues" | cut -d' ' -f1 | issue_menu
      ;;
    "Watched issues")
      jira watched --template rofi_issues | menu "Watched issues" | cut -d' ' -f1 | issue_menu
      ;;
    "Create issue")
      ;;
    "Issues: "*)
      p=$(echo $choice | cut -d' ' -f2)
      jira list --template rofi_issues --query "project = ${p} AND (status != Done OR resolved >= -7d) ORDER BY priority desc, updated" | menu "${p} issues" | cut -d' ' -f1 | issue_menu
      ;;
    "Projects")
      jira projects --template rofi_projects | menu "Projects" | cut -d' ' -f1 | project_menu
      ;;
  esac
}

## Menu: Issue
#
# Provides useful operations on a specific issue
#
issue_menu() {
  _menu=$(cat <<EOF
View in browser
Edit
Transition
Assign
Unassign
Resolve
EOF
)
  issue=$(cat -)
  [[ "${issue}" = "" ]] && main_menu && return
  case `echo "${_menu}" | menu ${issue}` in
    "View in browser")
      jira browse ${issue} &>/dev/null
      ;;
    #"View in CLI")
    #  term_run jira-ui ${issue}
    #  ;;
    "Edit")
      term_run jira edit ${issue}
      ;;
    "Transition")
      to=$(jira transitions ${issue} | cut -d' ' -f2- | menu "Transitions")
      ( jira transition ${to} ${issue} && notify "Task ${issue} state changed to ${to}" ) || notify "Task transition failed"
      ;;
    "Assign")
      to=$(jira assignable ${issue} | menu "Users")
      ( jira assign ${issue} ${to} && notify "Task ${issue} assigned to ${to}" ) || notify "Task assign failed"
      ;;
    "Unassign")
      ( jira unassign ${issue} && notify "Task ${issue} unassigned" ) || notify "Task unassign failed"
      ;;
    "")
      main_menu && return
      ;;
  esac
}

## Menu: Project
#
# Provides operations on a project
#
project_menu() {
  _menu=$(cat <<EOF
Tasks
Members
EOF
)
  project=$(cat -)
  [[ "${project}" = "" ]] && main_menu && return
  case `echo "${_menu}" | menu ${project}` in
    "Tasks")
      jira list --template rofi_issues --query "project = ${project} ORDER BY priority desc, updated" | menu ${project} issues | cut -d' ' -f1 | issue_menu
      ;;
    "Members")
      jira members ${project} | menu "${project} members" >/dev/null
      ;;
    "")
      main_menu && return
      ;;
  esac
}

## Workflow: Create issue
#
# TODO 
#

###############
#             #
#  main() :)  #
#             #
###############

main_menu
